---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
execute:
  echo: true
  eval: true
---

# ðŸŽ² Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

## Investment Game Simulation Analysis

### Original Game Strategy
**Game Rules:** Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.

## Question 1: Expected Value Analysis

### What is the expected value of your account balance after 1 coin flip?

### The expected value after 1 coin flip is $1050. Using the expected value formula, we can calculate the expected value of the account balance after 1 coin flip. The math is as follows: .5*1500 + .5*600 = $1050.

```{r}
# Set up parameters
initial_balance <- 1000
prob_heads <- 0.5
prob_tails <- 0.5

# Calculate possible outcomes after 1 coin flip
outcome_heads <- initial_balance * 1.5  # +50% if heads
outcome_tails <- initial_balance * 0.6  # -40% if tails

# Calculate expected value
expected_value <- prob_heads * outcome_heads + prob_tails * outcome_tails

cat("=== EXPECTED VALUE CALCULATION ===\n")
cat("Initial balance: $", initial_balance, "\n")
cat("Outcome if heads (+50%): $", outcome_heads, "\n")
cat("Outcome if tails (-40%): $", outcome_tails, "\n")
cat("Probability of heads: ", prob_heads, "\n")
cat("Probability of tails: ", prob_tails, "\n")
cat("\nExpected Value = P(Heads) Ã— Outcome(Heads) + P(Tails) Ã— Outcome(Tails)\n")
cat("Expected Value = ", prob_heads, " Ã— $", outcome_heads, " + ", prob_tails, " Ã— $", outcome_tails, "\n")
cat("Expected Value = $", prob_heads * outcome_heads, " + $", prob_tails * outcome_tails, "\n")
cat("Expected Value = $", expected_value, "\n")
```

### Question 2: Expectation vs Reality

###The expected value is positive and we expect the value to be worth more than the original $1000.

```{r}
# Is the expected value positive or negative?
is_positive <- expected_value > initial_balance
is_negative <- expected_value < initial_balance

cat("\n=== EXPECTATION VS REALITY ===\n")
cat("Expected value: $", expected_value, "\n")
cat("Initial balance: $", initial_balance, "\n")
cat("Expected value is", ifelse(is_positive, "POSITIVE", "NEGATIVE"), "\n")
cat("Expected value is", ifelse(expected_value > initial_balance, "HIGHER", "LOWER"), "than initial balance\n")
cat("Difference from initial: $", round(expected_value - initial_balance, 2), "\n")

# Calculate the expected return percentage
expected_return_pct <- ((expected_value - initial_balance) / initial_balance) * 100
cat("Expected return: ", round(expected_return_pct, 1), "%\n")
```

## Question 3: Single Simulation - Account Balance Over Time

### Run one simulation showing the dynamics of your account balance over time

```{r}
# Load required libraries
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(123)

# Parameters for single simulation
initial_balance <- 1000
n_years <- 30  # Age 25 to 55
current_age <- 25

# Function to simulate one complete path
simulate_single_path <- function(initial, years) {
  balance <- initial
  age <- current_age
  path_data <- tibble(
    year = 0:years,
    age = (current_age):(current_age + years),
    balance = c(initial, rep(NA, years))
  )
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5  # +50% if heads
    } else {
      balance <- balance * 0.6  # -40% if tails
    }
    path_data$balance[i + 1] <- balance
  }
  
  return(path_data)
}

# Run single simulation
single_simulation <- simulate_single_path(initial_balance, n_years)

# Display the data
cat("=== SINGLE SIMULATION RESULTS ===\n")
print(single_simulation)

# Calculate key statistics
final_balance <- single_simulation$balance[n_years + 1]
total_return <- ((final_balance - initial_balance) / initial_balance) * 100
max_balance <- max(single_simulation$balance)
min_balance <- min(single_simulation$balance)

cat("\nKey Statistics:\n")
cat("Final balance at age 55: $", round(final_balance, 2), "\n")
cat("Total return: ", round(total_return, 1), "%\n")
cat("Maximum balance reached: $", round(max_balance, 2), "\n")
cat("Minimum balance reached: $", round(min_balance, 2), "\n")
```

### Visualization: Account Balance Over Time

```{r}
# Create the time series plot
ggplot(single_simulation, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 2) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_hline(yintercept = 10000, color = "green", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Account Balance Over Time - Single Simulation",
    subtitle = paste("From age", current_age, "to", current_age + n_years, 
                    "| Final balance: $", round(final_balance, 2)),
    x = "Age",
    y = "Account Balance ($)",
    caption = "Red line: Initial balance ($1,000) | Green line: $10,000 threshold"
  ) +
  scale_y_continuous(
    labels = scales::dollar_format(),
    breaks = seq(0, max(single_simulation$balance) * 1.1, by = 2000)
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  ) +
  annotate("text", 
           x = current_age + 5, 
           y = max(single_simulation$balance) * 0.9,
           label = paste("Final: $", round(final_balance, 0)),
           color = "darkblue",
           fontface = "bold")
```

### Analysis and Commentary

*[I am happy with the final outcome because :*
- *Are you happy with the final outcome?*
- *What patterns do you notice in the balance over time?*
- *How does this compare to your expectations?*
- *What does this tell you about the investment strategy?*
- *Any surprises or insights from this single simulation?]*


