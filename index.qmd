---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
execute:
  echo: false
  eval: true
---

# ðŸŽ² Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

## Investment Game Simulation Analysis

### Original Game Strategy
**Game Rules:** Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.

## Question 1: Expected Value Analysis

### What is the expected value of your account balance after 1 coin flip?

### The expected value after 1 coin flip is $1050. Using the expected value formula, we can calculate the expected value of the account balance after 1 coin flip. The math is as follows: .5*1500 + .5*600 = $1050.

```{r}
# Set up parameters
initial_balance <- 1000
prob_heads <- 0.5
prob_tails <- 0.5

# Calculate possible outcomes after 1 coin flip
outcome_heads <- initial_balance * 1.5  # +50% if heads
outcome_tails <- initial_balance * 0.6  # -40% if tails

# Calculate expected value
expected_value <- prob_heads * outcome_heads + prob_tails * outcome_tails

cat("=== EXPECTED VALUE CALCULATION ===\n")
cat("Initial balance: $", initial_balance, "\n")
cat("Outcome if heads (+50%): $", outcome_heads, "\n")
cat("Outcome if tails (-40%): $", outcome_tails, "\n")
cat("Probability of heads: ", prob_heads, "\n")
cat("Probability of tails: ", prob_tails, "\n")
cat("\nExpected Value = P(Heads) Ã— Outcome(Heads) + P(Tails) Ã— Outcome(Tails)\n")
cat("Expected Value = ", prob_heads, " Ã— $", outcome_heads, " + ", prob_tails, " Ã— $", outcome_tails, "\n")
cat("Expected Value = $", prob_heads * outcome_heads, " + $", prob_tails * outcome_tails, "\n")
cat("Expected Value = $", expected_value, "\n")
```

### Question 2: Expectation vs Reality

###The expected value is positive and we expect the value to be worth more than the original $1000.

```{r}
# Is the expected value positive or negative?
is_positive <- expected_value > initial_balance
is_negative <- expected_value < initial_balance

cat("\n=== EXPECTATION VS REALITY ===\n")
cat("Expected value: $", expected_value, "\n")
cat("Initial balance: $", initial_balance, "\n")
cat("Expected value is", ifelse(is_positive, "POSITIVE", "NEGATIVE"), "\n")
cat("Expected value is", ifelse(expected_value > initial_balance, "HIGHER", "LOWER"), "than initial balance\n")
cat("Difference from initial: $", round(expected_value - initial_balance, 2), "\n")

# Calculate the expected return percentage
expected_return_pct <- ((expected_value - initial_balance) / initial_balance) * 100
cat("Expected return: ", round(expected_return_pct, 1), "%\n")
```

## Question 3: Single Simulation - Account Balance Over Time

### Run one simulation showing the dynamics of your account balance over time

```{r}
# Load required libraries
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(123)

# Parameters for single simulation
initial_balance <- 1000
n_years <- 30  # Age 25 to 55
current_age <- 25

# Function to simulate one complete path
simulate_single_path <- function(initial, years) {
  balance <- initial
  age <- current_age
  path_data <- tibble(
    year = 0:years,
    age = (current_age):(current_age + years),
    balance = c(initial, rep(NA, years))
  )
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5  # +50% if heads
    } else {
      balance <- balance * 0.6  # -40% if tails
    }
    path_data$balance[i + 1] <- balance
  }
  
  return(path_data)
}

# Run single simulation
single_simulation <- simulate_single_path(initial_balance, n_years)

# Display the data
cat("=== SINGLE SIMULATION RESULTS ===\n")
print(single_simulation)

# Calculate key statistics
final_balance <- single_simulation$balance[n_years + 1]
total_return <- ((final_balance - initial_balance) / initial_balance) * 100
max_balance <- max(single_simulation$balance)
min_balance <- min(single_simulation$balance)

cat("\nKey Statistics:\n")
cat("Final balance at age 55: $", round(final_balance, 2), "\n")
cat("Total return: ", round(total_return, 1), "%\n")
cat("Maximum balance reached: $", round(max_balance, 2), "\n")
cat("Minimum balance reached: $", round(min_balance, 2), "\n")
```

### Visualization: Account Balance Over Time

```{r}
# Create the time series plot
ggplot(single_simulation, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 2) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_hline(yintercept = 10000, color = "green", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Account Balance Over Time - Single Simulation",
    subtitle = paste("From age", current_age, "to", current_age + n_years, 
                    "| Final balance: $", round(final_balance, 2)),
    x = "Age",
    y = "Account Balance ($)",
    caption = "Red line: Initial balance ($1,000) | Green line: $10,000 threshold"
  ) +
  scale_y_continuous(
    labels = scales::dollar_format(),
    breaks = seq(0, max(single_simulation$balance) * 1.1, by = 2000)
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  ) +
  annotate("text", 
           x = current_age + 5, 
           y = max(single_simulation$balance) * 0.9,
           label = paste("Final: $", round(final_balance, 0)),
           color = "darkblue",
           fontface = "bold")
```

### Analysis and Commentary

*I am happy with the final outcome because there was a 704% return over 30 years. The beginning was very rough as it dropped to $540 in year 3. Although the growth was very volatile, we still came out to a net profit. However, this is understandable as the nature of the investment game was high-risk and high-reward.*

## Question 4: Multiple Simulations - Distribution Analysis

### Run 100 simulations modelling the dynamics of your account balance over time

```{r}
# Set seed for reproducibility
set.seed(123)

# Parameters
initial_balance <- 1000
n_years <- 30  # Age 25 to 55
n_sims <- 100

# Function to simulate one complete path (reuse from before)
simulate_single_path <- function(initial, years) {
  balance <- initial
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5  # +50% if heads
    } else {
      balance <- balance * 0.6  # -40% if tails
    }
  }
  return(balance)
}

# Run 100 simulations
cat("Running 100 simulations...\n")
final_balances <- replicate(n_sims, simulate_single_path(initial_balance, n_years))

# Create results data frame
simulation_results <- tibble(
  simulation = 1:n_sims,
  final_balance = final_balances
)

# Calculate key statistics
mean_final <- mean(final_balances)
median_final <- median(final_balances)
min_final <- min(final_balances)
max_final <- max(final_balances)
prob_above_1k <- mean(final_balances > 1000)
prob_above_10k <- mean(final_balances > 10000)
prob_above_100k <- mean(final_balances > 100000)

cat("=== 100 SIMULATIONS SUMMARY ===\n")
cat("Mean final balance: $", round(mean_final, 2), "\n")
cat("Median final balance: $", round(median_final, 2), "\n")
cat("Minimum final balance: $", round(min_final, 2), "\n")
cat("Maximum final balance: $", round(max_final, 2), "\n")
cat("Probability > $1,000: ", round(prob_above_1k, 3), "\n")
cat("Probability > $10,000: ", round(prob_above_10k, 3), "\n")
cat("Probability > $100,000: ", round(prob_above_100k, 3), "\n")
```

### Visualization: Distribution of Final Balances

```{r}
# Create histogram of final balances
ggplot(simulation_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 10000, color = "green", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = mean_final, color = "orange", linetype = "solid", linewidth = 1) +
  labs(
    title = "Distribution of Final Balances - 100 Simulations",
    subtitle = paste("Age 25 to 55 (30 years) | Mean: $", round(mean_final, 0), 
                    "| Median: $", round(median_final, 0)),
    x = "Final Balance at Age 55 ($)",
    y = "Number of Simulations",
    caption = "Red line: Initial balance ($1,000) | Green line: $10,000 threshold | Orange line: Mean"
  ) +
  scale_x_continuous(
    labels = scales::dollar_format(),
    trans = "log10"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )
```

### Detailed Statistics

```{r}
# Create summary statistics table
summary_stats <- simulation_results %>%
  summarise(
    count = n(),
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    std_dev = sd(final_balance),
    min_balance = min(final_balance),
    max_balance = max(final_balance),
    q25 = quantile(final_balance, 0.25),
    q75 = quantile(final_balance, 0.75),
    prob_above_1k = mean(final_balance > 1000),
    prob_above_10k = mean(final_balance > 10000),
    prob_above_100k = mean(final_balance > 100000),
    prob_below_1k = mean(final_balance < 1000)
  )

cat("=== DETAILED STATISTICS ===\n")
print(summary_stats)

# Show some individual results
cat("\n=== SAMPLE OF INDIVIDUAL RESULTS ===\n")
sample_results <- simulation_results %>%
  arrange(desc(final_balance)) %>%
  slice_head(n = 10)

print(sample_results)
```

### Analysis and Commentary

*I am not happy with the overall results. Across 100 runs, the median balance was $206. Majority of the runs were well below the initial balance of $1000, suggesting a net loss from this game. Although the mean is $1782, this is heavily skewed by a few runs that had an extremely high return. 

### Question 5: Probability Analysis-Based on the 100 simulations above, what is the probability the balance will be greater than $1000 at age 55?

*The probability of the balance being greater than $1000 at age 55 is around 28%. From the 100 simulations, the majority of them fell below the initial balance of $1000.*



### Question 6: Strategy Comparison-Run 100 simulations for the modified game strategy shown below. What is the probability that your account balance will be greater than $10,000 at age 55? Is this probability higher or lower than the probability in the original game?

###Example 2: Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your bet by 50%; if it comes up tails, we reduce your bet by 40%. You must bet exactly 50% of your current account balance on each flip, and this 50% is locked in for each round. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account

```{r}
# Set seed for reproducibility
set.seed(123)

# Parameters for modified strategy
initial_balance <- 1000
n_years <- 30  # Age 25 to 55
n_sims <- 100
bet_fraction <- 0.5  # Must bet exactly 50% of current balance

# Function to simulate modified strategy (betting 50% of balance each time)
simulate_modified_strategy <- function(initial, years) {
  balance <- initial
  
  for (i in 1:years) {
    # Calculate bet amount (50% of current balance)
    bet_amount <- balance * bet_fraction
    
    # Flip coin
    coin_flip <- rbinom(1, 1, 0.5)
    
    if (coin_flip == 1) {
      # Heads: increase bet by 50%
      balance <- balance - bet_amount + (bet_amount * 1.5)
    } else {
      # Tails: reduce bet by 40%
      balance <- balance - bet_amount + (bet_amount * 0.6)
    }
  }
  
  return(balance)
}

# Run 100 simulations for modified strategy
cat("Running 100 simulations for modified strategy...\n")
modified_final_balances <- replicate(n_sims, simulate_modified_strategy(initial_balance, n_years))

# Create results data frame for modified strategy
modified_simulation_results <- tibble(
  simulation = 1:n_sims,
  final_balance = modified_final_balances
)

# Calculate key statistics for modified strategy
modified_mean_final <- mean(modified_final_balances)
modified_median_final <- median(modified_final_balances)
modified_min_final <- min(modified_final_balances)
modified_max_final <- max(modified_final_balances)
modified_prob_above_1k <- mean(modified_final_balances > 1000)
modified_prob_above_10k <- mean(modified_final_balances > 10000)
modified_prob_above_100k <- mean(modified_final_balances > 100000)

cat("=== MODIFIED STRATEGY (50% BET) - 100 SIMULATIONS SUMMARY ===\n")
cat("Mean final balance: $", round(modified_mean_final, 2), "\n")
cat("Median final balance: $", round(modified_median_final, 2), "\n")
cat("Minimum final balance: $", round(modified_min_final, 2), "\n")
cat("Maximum final balance: $", round(modified_max_final, 2), "\n")
cat("Probability > $1,000: ", round(modified_prob_above_1k, 3), "\n")
cat("Probability > $10,000: ", round(modified_prob_above_10k, 3), "\n")
cat("Probability > $100,000: ", round(modified_prob_above_100k, 3), "\n")
```

### Visualization: Modified Strategy Distribution

```{r}
# Create histogram of modified strategy final balances
ggplot(modified_simulation_results, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "lightblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 10000, color = "green", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = modified_mean_final, color = "orange", linetype = "solid", linewidth = 1) +
  labs(
    title = "Distribution of Final Balances - Modified Strategy (50% Bet)",
    subtitle = paste("Age 25 to 55 (30 years) | Mean: $", round(modified_mean_final, 0), 
                    "| Median: $", round(modified_median_final, 0)),
    x = "Final Balance at Age 55 ($)",
    y = "Number of Simulations",
    caption = "Red line: Initial balance ($1,000) | Green line: $10,000 threshold | Orange line: Mean"
  ) +
  scale_x_continuous(
    labels = scales::dollar_format(),
    trans = "log10"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )
```

### Visualization: Strategy Comparison

```{r}
# Create comparison data frame
comparison_data <- bind_rows(
  simulation_results %>% mutate(strategy = "Original (All-in)"),
  modified_simulation_results %>% mutate(strategy = "Modified (50% Bet)")
)

# Create side-by-side histograms
ggplot(comparison_data, aes(x = final_balance, fill = strategy)) +
  geom_histogram(bins = 20, alpha = 0.7, color = "black") +
  facet_wrap(~strategy, scales = "free") +
  geom_vline(xintercept = 1000, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 10000, color = "green", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Distribution of Final Balances - Strategy Comparison",
    subtitle = "100 Simulations Each | Red line: $1,000 | Green line: $10,000",
    x = "Final Balance at Age 55 ($)",
    y = "Number of Simulations"
  ) +
  scale_x_continuous(
    labels = scales::dollar_format(),
    trans = "log10"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12),
    legend.position = "none"
  )
```

### Strategy Comparison Statistics

```{r}
# Create detailed comparison table
comparison_stats <- comparison_data %>%
  group_by(strategy) %>%
  summarise(
    count = n(),
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    std_dev = sd(final_balance),
    min_balance = min(final_balance),
    max_balance = max(final_balance),
    prob_above_1k = mean(final_balance > 1000),
    prob_above_10k = mean(final_balance > 10000),
    prob_above_100k = mean(final_balance > 100000),
    prob_below_1k = mean(final_balance < 1000)
  )

cat("=== STRATEGY COMPARISON STATISTICS ===\n")
print(comparison_stats)

# Direct comparison of probabilities
cat("\n=== PROBABILITY COMPARISON ===\n")
cat("Original strategy - Probability > $10,000: ", round(prob_above_10k, 3), "\n")
cat("Modified strategy - Probability > $10,000: ", round(modified_prob_above_10k, 3), "\n")
cat("Difference: ", round(modified_prob_above_10k - prob_above_10k, 3), "\n")
cat("Modified strategy is", ifelse(modified_prob_above_10k > prob_above_10k, "HIGHER", "LOWER"), "than original\n")
```

### Analysis and Commentary

*Based on the 100 simulations for the modified game strategy, there is a 5% chance the account balance will be greater than $10,000. This probability is much lower than the probability than the original game. This is due to the original game being much more volatile due to the all-in strategy. *

